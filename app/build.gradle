apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

androidExtensions {
    experimental = true
}

kapt {
    //Gradle 构建缓存支持
    useBuildCache = true
    //使用 Java 编译器来运行注解处理器
    javacOptions {
        // 增加注解处理器的最大错误次数
        // 默认为 100。
        option("-Xmaxerrs", 500)
    }
    //非存在类型校正
    correctErrorTypes = true
}

android {
    compileSdkVersion compile
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/rxjava.properties'
    }
    lintOptions {
        abortOnError false
        check 'Interoperability'
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
        main.java.srcDirs += 'src/main/kotlin'
    }
    signingConfigs {
        release {
            storeFile file("D:/keystore/bluemobi.keystore")
            storePassword "bluemobi"
            keyAlias "bluemobi.keystore"
            keyPassword "bluemobi"
        }
    }
    defaultConfig {
        applicationId "com.sc.clgg"
        multiDexEnabled true
        minSdkVersion min
        targetSdkVersion target
        versionCode = 13
        versionName = "4.2.2"
        signingConfig signingConfigs.debug
        resConfigs "zh", "en"
        vectorDrawables.useSupportLibrary = true

        ndk {
            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            //"armeabi", "armeabi-v7a", "arm64-v8a", ,"arm64-v8a","x86", "x86_64"
//            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', "x86"
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            // armeabi, mips and mips64 has removed since NDK r17
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            splits.abi.enable = false
            splits.density.enable = false
            aaptOptions.cruncherEnabled = false
            ext.alwaysUpdateBuildId = false

            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${debugTime()}_v${variant.versionName}_${variant.buildType.name}.apk"
                }
            }
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true  //混淆
            zipAlignEnabled true  //Zipalign优化
            shrinkResources true  // 移除无用的resource文件

            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release  //签名

            applicationVariants.all { variant ->
                variant.outputs.all {//variant.productFlavors[0].name
                    outputFileName = "${releaseTime()}_v${variant.versionName}_${variant.buildType.name}.apk"
                }
            }
        }
    }
}

def static debugTime() {//-HH-mm-ss
    return new Date().format("yyyyMMddHHmm", TimeZone.getDefault())
}

def static releaseTime() {//-HH-mm-ss
    return new Date().format("yyyyMMddHHmm", TimeZone.getDefault())
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0-beta01'
    implementation('androidx.core:core-ktx:1.2.0-alpha01') {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    }
    implementation('androidx.constraintlayout:constraintlayout:2.0.0-beta1') {
        exclude group: 'androidx.appcompat', module: 'appcompat'
    }
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.13-beta-3'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'androidx.viewpager2:viewpager2:1.0.0-alpha06'

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation('com.google.android.material:material:1.1.0-alpha07') {
        force = true
        exclude group: 'androidx.appcompat', module: 'appcompat'
    }
    implementation('androidx.recyclerview:recyclerview:1.1.0-alpha06') {
        force = true
    }

    //Using Anko
    implementation("org.jetbrains.anko:anko:$anko_version") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
        exclude group: 'androidx.appcompat', module: 'appcompat'
    }

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.1'

    implementation 'com.amap.api:3dmap:6.9.0'
    implementation 'com.amap.api:location:4.6.0'
    implementation 'com.amap.api:search:6.9.0'

    implementation 'com.youth.banner:banner:1.4.10'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-2'

    implementation 'com.google.code.gson:gson:2.8.5'

    implementation 'org.greenrobot:eventbus:3.1.1'

    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation('com.squareup.retrofit2:converter-gson:2.5.0') {
        exclude group: 'com.squareup.retrofit2'
        exclude group: 'com.google.code.gson'
    }
    implementation('com.squareup.okhttp3:logging-interceptor:3.12.1') {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    //沉浸式
    implementation 'com.gyf.immersionbar:immersionbar:2.3.3'

    //图表
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    //侧滑
    implementation 'com.github.mcxtzhang:SwipeDelMenuLayout:V1.3.0'

    //Glide(4.9.0方法名改变，takephoto_library 相册选择会崩溃)
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    kapt 'com.github.bumptech.glide:compiler:4.8.0'
    implementation 'com.tencent.bugly:crashreport:2.8.6.0'
    implementation('org.devio.takephoto:takephoto_library:4.1.0') {
        exclude group: 'com.github.bumptech.glide', module: 'glide'
        exclude group: 'io.reactivex'
        exclude group: 'androidx.appcompat', module: 'appcompat'
    }

    implementation files('libs/SecurityEnvSDK-release-1.1.0.jar')
    implementation files('libs/umeng-common-2.0.1.jar')
    implementation files('libs/umeng-share-core-6.9.4.jar')
    implementation files('libs/umeng-share-QQ-simplify-6.9.4.jar')
    implementation files('libs/umeng-share-wechat-simplify-6.9.4.jar')
    implementation files('libs/umeng-shareboard-widget-6.9.4.jar')
    implementation files('libs/umeng-sharetool-6.9.4.jar')
    implementation files('libs/utdid4all-1.1.5.3_proguard.jar')

    implementation('com.lzy.widget:ninegridview:0.2.1') {
        exclude group: 'androidx.appcompat', module: 'appcompat'
        exclude group: 'androidx.legacy', module: 'legacy-support-v4'
        exclude group: 'androidx.annotation', module: 'annotation'
    }
    implementation 'com.contrarywind:Android-PickerView:4.1.8'

    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:5.1.6'

    //implementation 'top.zibin:Luban:1.1.8'
    implementation files('libs/obu-sdk.jar')
    implementation files('libs/protobuf-java-2.4.0a.jar')

    //implementation files('libs/protobuf-java-2.4.0a.jar')
    implementation('pub.devrel:easypermissions:2.0.0') {
        exclude group: 'androidx.appcompat', module: 'appcompat'
    }

    implementation("android.arch.paging:runtime:1.0.1")

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"

    // alternatively - just ViewModel
    implementation "android.arch.lifecycle:viewmodel:$lifecycle_version"

    // use -ktx for Kotlin

    // alternatively - just LiveData
    implementation "android.arch.lifecycle:livedata:$lifecycle_version"

    // alternatively - Lifecycles only (no ViewModel or LiveData).

    // Support library depends on this lightweight import
    implementation "android.arch.lifecycle:runtime:$lifecycle_version"
    kapt "android.arch.lifecycle:compiler:$lifecycle_version"

    // alternately - if using Java8, use the following instead of compiler
    implementation "android.arch.lifecycle:common-java8:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "android.arch.lifecycle:reactivestreams:$lifecycle_version"

    // optional - Test helpers for LiveData
    testImplementation "android.arch.core:core-testing:$lifecycle_version"


    /*configurations.all {
        resolutionStrategy.force 'com.android.support:support-annotations:26.1.0'
        //循环一个个的依赖库
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            //获取当前循环到的依赖库
            def requested = details.requested
            //如果这个依赖库群组的名字是com.android.support
            if (requested.group == 'com.android.support') {
                //且其名字不是以multidex开头的
                if (!requested.name.startsWith("multidex")) {
                    //这里指定需要统一的依赖版本
                    details.useVersion '27.1.0'
                }
            }
        }
    }*/

    /*configurations.all {
        resolutionStrategy {
            force 'com.android.support:design:27.1.1'
            force 'com.android.support:support-v4:27.1.1'
            force 'com.android.support:appcompat-v7:27.1.1'
            force 'com.github.bumptech.glide:glide:4.6.1'
        }
    }*/
}
