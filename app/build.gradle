apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

androidExtensions {
    experimental = true
}

kapt {
    useBuildCache = true
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
    }
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/rxjava.properties'
    }
    lintOptions {
        abortOnError false
        check 'Interoperability'
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
        main.java.srcDirs += 'src/main/kotlin'
    }
    signingConfigs {
        release {
            storeFile file("D:/keystore/bluemobi.keystore")
            storePassword "bluemobi"
            keyAlias "bluemobi.keystore"
            keyPassword "bluemobi"
        }
    }
    /*splits {
        abi {
            enable true
            reset()
            // Specify a list of ABIs that Gradle should create APKs for
            include 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a'
            // If you don’t want to generate a universal APK that includes all ABIs.
            universalApk false
        }
    }*/
    defaultConfig {
        applicationId "com.sc.clgg"
        multiDexEnabled true
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode = 12
        versionName = "4.2.1"
        signingConfig signingConfigs.debug
        resConfigs "zh", "en"
        ndk {
            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            //"armeabi", "armeabi-v7a", "arm64-v8a", ,"arm64-v8a","x86", "x86_64"
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', "x86"
            //abiFilters 'arm64-v8a', 'armeabi', 'armeabi-v7a', 'x86'
            // armeabi, mips and mips64 has removed since NDK r17
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            splits.abi.enable = false
            splits.density.enable = false
            aaptOptions.cruncherEnabled = false
            ext.alwaysUpdateBuildId = false

            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${debugTime()}_v${variant.versionName}_${variant.buildType.name}.apk"
                }
            }
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true  //混淆
            zipAlignEnabled true  //Zipalign优化
            shrinkResources true  // 移除无用的resource文件

            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release  //签名

            applicationVariants.all { variant ->
                variant.outputs.all {//variant.productFlavors[0].name
                    outputFileName = "${releaseTime()}_v${variant.versionName}_${variant.buildType.name}.apk"
                }
            }
        }
    }
}

def static debugTime() {//-HH-mm-ss
    return new Date().format("yyyyMMddHHmm", TimeZone.getDefault())
}

def static releaseTime() {//-HH-mm-ss
    return new Date().format("yyyyMMddHHmm", TimeZone.getDefault())
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation('com.google.android.material:material:1.1.0-alpha02') {
        force = true
    }
    implementation('androidx.legacy:legacy-support-v4:1.0.0') {
        force = true
    }
    implementation('androidx.recyclerview:recyclerview:1.1.0-alpha01') {
        force = true
    }
    testImplementation "junit:junit:$junitLibraryVersion"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha02'
    implementation 'androidx.core:core-ktx:1.1.0-alpha04'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.amap.api:3dmap:6.7.0'
    implementation 'com.amap.api:location:4.5.0'
    implementation 'com.amap.api:search:6.5.0.1'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.youth.banner:banner:1.4.10'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'

    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'
    implementation 'com.tencent.bugly:crashreport:2.8.6.0'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.1'
    implementation 'com.squareup.okhttp3:okhttp:3.12.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Anko Commons
    implementation "org.jetbrains.anko:anko-commons:$anko_version"

    // Anko Layouts
    implementation "org.jetbrains.anko:anko-sdk25:$anko_version"

    // sdk15, sdk19, sdk21, sdk23 are also available
    implementation "org.jetbrains.anko:anko-appcompat-v7:$anko_version"

    // Coroutine listeners for Anko Layouts
    implementation "org.jetbrains.anko:anko-sdk25-coroutines:$anko_version"
    implementation "org.jetbrains.anko:anko-appcompat-v7-coroutines:$anko_version"

    // Anko SQLite
    implementation "org.jetbrains.anko:anko-sqlite:$anko_version"
    implementation "org.jetbrains.anko:anko-sdk25-listeners:$anko_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.0'

    //沉浸式
    implementation 'com.gyf.barlibrary:barlibrary:2.3.0'

    //图表
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0-alpha'

    //侧滑
    implementation 'com.github.mcxtzhang:SwipeDelMenuLayout:V1.3.0'

    //Glide
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    kapt 'com.github.bumptech.glide:compiler:4.8.0'
    implementation files('libs/SecurityEnvSDK-release-1.1.0.jar')
    implementation files('libs/umeng-common-2.0.1.jar')
    implementation files('libs/umeng-share-core-6.9.4.jar')
    implementation files('libs/umeng-share-QQ-simplify-6.9.4.jar')
    implementation files('libs/umeng-share-wechat-simplify-6.9.4.jar')
    implementation files('libs/umeng-shareboard-widget-6.9.4.jar')
    implementation files('libs/umeng-sharetool-6.9.4.jar')
    implementation files('libs/utdid4all-1.1.5.3_proguard.jar')
    implementation 'com.lzy.widget:ninegridview:0.2.1'
    implementation 'com.contrarywind:Android-PickerView:4.1.6'
    implementation 'org.devio.takephoto:takephoto_library:4.1.0'
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:5.1.6'

    //implementation 'top.zibin:Luban:1.1.8'
    implementation files('libs/obu-sdk.jar')
//    implementation files('libs/protobuf-java-2.4.0a.jar')
    implementation 'pub.devrel:easypermissions:2.0.0'

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"

    // alternatively - just ViewModel
    implementation "android.arch.lifecycle:viewmodel:$lifecycle_version"

    // use -ktx for Kotlin

    // alternatively - just LiveData
    implementation "android.arch.lifecycle:livedata:$lifecycle_version"

    // alternatively - Lifecycles only (no ViewModel or LiveData).

    // Support library depends on this lightweight import
    implementation "android.arch.lifecycle:runtime:$lifecycle_version"
    kapt "android.arch.lifecycle:compiler:$lifecycle_version"

    // alternately - if using Java8, use the following instead of compiler
    implementation "android.arch.lifecycle:common-java8:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "android.arch.lifecycle:reactivestreams:$lifecycle_version"

    // optional - Test helpers for LiveData
    testImplementation "android.arch.core:core-testing:$lifecycle_version"
}
